; comments start with ;
; constants are defined with a let. They can be instruments or tablature pieces

; program header must start with a set of "key value" properties

; tempo, specified as the number of beats per minute (1 quarter/crotchet == 1 beat)
tempo : 120
; for retro-machines, the destination refresh rate (50 or 60 Hz) must be specified
; to properly calculate the tempo
psg.hz: 60
cande:mor

; variables start with $ and assigning an instrument or tablature uses the `:=`symbol
$instrument1 := psg {
    pattern: 2
}
$instrument2:= psg {
    frequency:123
    noise: 12
    cycle: 23
    pattern: 4
}

$piece:= v15o4e8e8r8. ac8 | e# e4 (a b c)3 e-8 e#.. e+8
         abcd

; set channels instruments, combine variables and tablature literals. Constants are read with an $

@channel1 <- $instrument1 $piece
@channel2 <- $instrument2 r16 $piece

; sync barrier. Music doesn't continue until all channels have finished (two dash at least) 

---

; loop can include channels and sync barriers. It is an infinite loop, so it does not have sense
; nest loops or put anything after the loop 
; loop tag also acts as a synced block
loop:

@channel3 <- abcd+ abcd.b+4
             abcd


@channel3 <- a1 b2 c3 c4 c5 c6 a3.b+4
              a1 b2 c3 c4 c5 c6 a3.b#4